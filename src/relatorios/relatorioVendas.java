/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package relatorios;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import persistencia.conexao;

/**
 *
 * @author Igor
 */
public class relatorioVendas extends javax.swing.JFrame {

    String nomePes = "", nomePro = ""; //variaveis para pesquisa
    String somaTotal, somaQuantidade; //variaveis para o metodo soma

    /**
     * Creates new form relatorioVendas
     */
    public relatorioVendas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultatoSelect = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        pesPessoa = new javax.swing.JTextField();
        pesProduto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campoStotal = new javax.swing.JTextField();
        campoSquantidade = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatórios de Vendas:");

        resultatoSelect.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "título 1", "título 2", "título 3", "título 4", "título 5", "título 6", "título 7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(resultatoSelect);

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pesPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesPessoaActionPerformed(evt);
            }
        });

        jLabel1.setText("Pessoa a Pesquisar:");

        jLabel2.setText("Produto a Pesqusar:");

        campoSquantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoSquantidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pesPessoa)
                    .addComponent(pesProduto)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(campoSquantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(campoStotal, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(pesProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoStotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoSquantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nomePes = pesPessoa.getText();
        nomePro = pesProduto.getText();

        try {
            pesquisa();
        } catch (SQLException ex) {
            Logger.getLogger(relatorioVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
        soma();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pesPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesPessoaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pesPessoaActionPerformed

    private void campoSquantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoSquantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoSquantidadeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(relatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(relatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(relatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(relatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new relatorioVendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoSquantidade;
    private javax.swing.JTextField campoStotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pesPessoa;
    private javax.swing.JTextField pesProduto;
    private javax.swing.JTable resultatoSelect;
    // End of variables declaration//GEN-END:variables

    public void pesquisa() throws SQLException {

        while (resultatoSelect.getModel().getRowCount() > 0) {
            ((DefaultTableModel) resultatoSelect.getModel()).removeRow(0);
        }

        conexao conexao = new conexao();
        conexao.getConexao();
        String selectSQL = "SELECT * FROM pessoas as A FULL OUTER JOIN vendas as B"
                + " on a.pes_id = b.ven_pes_id FULL OUTER JOIN itemsVendas C"
                + " on b.ven_id = c.iv_ven_id where a.pes_nome LIKE  '%" + nomePes + "%' and  "
                + " c.iv_pro_nome like '%" + nomePro + "%'";

        Statement pstmtCon;
        pstmtCon = conexao.getConexao().createStatement();

        ResultSet rs = pstmtCon.executeQuery(selectSQL);

        while (rs.next()) {

            if (nomePes.equals("") & nomePro.equals("")) {

                DefaultTableModel tabela = (DefaultTableModel) resultatoSelect.getModel();
                tabela.setColumnIdentifiers(new String[]{"Cod Venda", "Cod Produto", "Nome Produto", "Valor Unitário",
                    "Quantidate", "Valor Total", "Data"});
                tabela.addRow(new String[]{rs.getString("iv_ven_id"), rs.getString("iv_pro_id"),
                    rs.getString("iv_pro_nome"), rs.getString("iv_valor"), rs.getString("iv_quantidade"),
                    rs.getString("iv_totaValor"), rs.getString("iv_data")});
            }

            if (!nomePes.equals("") & nomePro.equals("")) {
                DefaultTableModel tabela = (DefaultTableModel) resultatoSelect.getModel();
                tabela.setColumnIdentifiers(new String[]{"Cod Venda", "Cod Produto", "Nome Produto", "Valor Unitário",
                    "Quantidate", "Valor Total", "Data"});
                tabela.addRow(new String[]{rs.getString("iv_ven_id"), rs.getString("iv_pro_id"),
                    rs.getString("iv_pro_nome"), rs.getString("iv_valor"), rs.getString("iv_quantidade"),
                    rs.getString("iv_totaValor"), rs.getString("iv_data")});
            }

            if (nomePes.equals("") & !nomePro.equals("")) {
                DefaultTableModel tabela = (DefaultTableModel) resultatoSelect.getModel();
                tabela.setColumnIdentifiers(new String[]{"Cod Pessoa", "Nome Pessoa", "Cod Venda", "Valor Unitário",
                    "Quantidate", "Valor Total", "Data"});
                tabela.addRow(new String[]{rs.getString("pes_id"), rs.getString("pes_nome"),
                    rs.getString("iv_ven_id"), rs.getString("iv_valor"), rs.getString("iv_quantidade"),
                    rs.getString("iv_totaValor"), rs.getString("iv_data")});
            }

            if (!nomePes.equals("") & !nomePro.equals("")) {
                DefaultTableModel tabela = (DefaultTableModel) resultatoSelect.getModel();
                tabela.setColumnIdentifiers(new String[]{"Nome Pessoa", "Nome Produto", "Cod Venda", "Valor Unitário",
                    "Quantidate", "Valor Total", "Data"});
                tabela.addRow(new String[]{rs.getString("pes_nome"), rs.getString("iv_pro_nome"),
                    rs.getString("iv_ven_id"), rs.getString("iv_valor"), rs.getString("iv_quantidade"),
                    rs.getString("iv_totaValor"), rs.getString("iv_data")});
            }
        }

        rs.close();
        pstmtCon.close();

    }

    public void soma() {

        int Squant = 0;
        float Stotal = 0;

        int linha = 0;
        int nlinhas = resultatoSelect.getModel().getRowCount();

        while (linha < nlinhas) {

            String Stringquant = (String) resultatoSelect.getValueAt(linha, 4);
            String Stringtotal = (String) resultatoSelect.getValueAt(linha, 5);

            int quant = Integer.parseInt(Stringquant);
            float total = Float.parseFloat(Stringtotal);

            Squant = Squant + quant;
            Stotal = Stotal + total;
            linha++;
        }

        somaQuantidade = Integer.toString(Squant);
        somaTotal = Float.toString(Stotal);

        campoSquantidade.setText(somaQuantidade);
        campoStotal.setText(somaTotal);
    }

}
